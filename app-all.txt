from flask import (Flask, url_for, render_template, request, redirect, flash, session, send_from_directory)
import sys, os, random, io 
import bcrypt
import cs304dbi as dbi
from datetime import timedelta
from werkzeug.utils import secure_filename
import login_handler, search_handler, user_reg, update
app = Flask(__name__)
app.secret_key = 'your secret here'
# replace that with a random key
app.secret_key = ''.join([ random.choice(('ABCDEFGHIJKLMNOPQRSTUVXYZ' +
                                          'abcdefghijklmnopqrstuvxyz' +
                                           '0123456789'))
                           for i in range(20) ])
# This gets us better error messages for certain common request errors
app.config['TRAP_BAD_REQUEST_ERRORS'] = True
# new for file upload
app.config['UPLOADS'] = 'uploads'
app.config['MAX_CONTENT_LENGTH'] = 1*1024*1024 # 1 MB

#Login page deal with 
@app.route('/', methods=['GET','POST'])
def login():
    ''' This is our main login page.'''
    conn = dbi.connect()
    # get values from cookies
    session_uid = session.get('uid')
    session_email = session.get('email')
    session_account_type = session.get('account_type')

    if not session_email:
        # case 1: first visit
        if request.method == 'GET':
            return render_template('login.html')
        # case 2: user submitted a form with their name
        elif request.method == 'POST':
            # if user clicked sign in button
            if request.form['submit'] == 'Sign In':
                email = request.form['email']
                inputPass = request.form['password']
                # check if email exists
                if user_reg.check_email(conn,email):
                    # find password from db 
                    stored, user_type = login_handler.getPassword (conn,email)
                    # hash the input password
                    hashedInput = bcrypt.hashpw(inputPass.encode('utf-8'), stored.encode('utf-8'))
                    hashedInputPass = hashedInput.decode('utf-8')
                    uid = int(user_reg.retrieve_uid(conn, email))
                    # if hashed input pass is equal to the stored password
                    if uid and hashedInputPass == stored:
                        session['uid'] = uid 
                        session['email']  = email
                        session['account_type'] = user_type
                        session['logged_in'] = True
                        if user_type == 'Student':
                            return redirect(url_for('welcome_student', uid=uid))
                        elif user_type == 'Referrer':
                            return redirect(url_for('welcome_referrer', uid=uid))
                        else:
                            return redirect(url_for('welcome_admin', uid=uid))
                    else:
                        flash("Incorrect password. Please try again.")
                        return render_template('login.html')
                else:
                    flash("Account not found. Please register.")
                    return render_template('login.html')
            else:
                return redirect(url_for('base_registration'))
    else:
        # case 3: a regular visit ï¼Ÿ
        if request.method == "GET":
            if session_account_type == 'Student':
                return redirect(url_for('welcome_student', uid=session_uid))
            elif session_account_type == 'Referrer':
                return redirect(url_for('welcome_referrer', uid=session_uid))
            else:
                return redirect(url_for('welcome_admin', uid=session_uid))

@app.route('/logout')
def logout():
    ''' This is a function for logout '''
    if session['logged_in']:
        session.pop('uid')
        session.pop('email')
        session.pop('account_type')
        session['logged_in'] = False
        flash('You are logged out.')
        return redirect(url_for('login'))
    else:
        flash('You are not logged in. Please login.')
        return redirect(url_for('login'))

@app.route('/base_registration',methods=['GET', 'POST'])
def base_registration():
    ''' This is our base registration page. '''
    conn = dbi.connect()
    if request.method == 'GET':
        return render_template('baseRegForm.html')
    else:
        # get parameters from the form
        name = request.form.get('name')
        password = request.form.get('password')
        email = request.form.get('email')
        # if email format is invalid
        if not user_reg.check_valid_email(conn, email):
            msg = 'Incorrect email format. Please re-enter.'
            return render_template('baseRegForm.html', msg=msg)
        # if email already exist, cannot re-register 
        if user_reg.check_email(conn,email):
            flash('Email exists, please sign in instead')
            return redirect(url_for("login"))
        year = request.form.get('classyear')
        accountType = request.form.get('accountType')
        # hash the password
        hashed = bcrypt.hashpw(password.encode('utf-8'),
                    bcrypt.gensalt())
        stored_password = hashed.decode('utf-8')
        # insert a new user into the database
        user_reg.insert_user_db(conn,name,email,stored_password,year,accountType)
        # retrieve the user's uid from the database
        uid = int(user_reg.retrieve_uid(conn,email))
        # determine what page to be redirected
        if accountType ==  "Student":
            session['uid'] = uid 
            session['email']  = email
            session['account_type'] = accountType
            return redirect(url_for("profile_student", uid = uid))
        elif accountType ==  "Referrer":
            session['uid'] = uid 
            session['email']  = email
            session['account_type'] = accountType
            return redirect(url_for("profile_referrer", uid = uid))
    
@app.route('/profile_referrer/<int:uid>', methods=['GET', 'POST'])
def profile_referrer(uid):
    ''' This is our profile page for referrer. ''' 
    conn = dbi.connect()
    if request.method == 'GET':
        return render_template('profile_referrer.html', uid = uid, company="", 
                    position="",emailPrefer="", otherContact="", 
                    linkedin="", phoneNumber="")
    else:
        name = user_reg.retrieve_user(conn, uid)
        company = request.form.get('company')
        position = request.form.get('position')
        emailPrefer = request.form.get('contactEmail')
        # if email format is invalid
        if not user_reg.check_valid_email(conn, emailPrefer):
            flash('Incorrect email format. Please re-enter.')
            return render_template('profile_referrer.html')
        linkedin = request.form.get('linkedIn')
        phoneNumber = request.form.get('phnum')
        otherContact = request.form.get('otherContact')
        user_reg.insert_referrer_profile(conn,uid,name,company,position,
    emailPrefer,otherContact,linkedin,phoneNumber)
        session['logged_in'] = True
        return redirect(url_for('welcome_referrer', uid=uid))

@app.route('/profile_student/<int:uid>', methods=['GET', 'POST'])
def profile_student(uid):
    ''' This is our profile page for student. ''' 
    conn = dbi.connect()
    if request.method == 'GET':
        return render_template('profile_student.html', msg="", uid=uid, major ="", 
                    minor="", loc ="", des="", resume="")
    else:
        try:
            # get parameters from the form
            major = request.form.get('major')
            minor = request.form.get('minor')
            prefLoc = request.form.get('prefLoc')
            description = request.form.get('description')
            name = user_reg.retrieve_user(conn, uid)
            f = request.files['resume']
            # if the format of file is not allowed
            if not user_reg.allowed_file(f.filename):
                flash('Incorrect file format. Only support txt, doc, or pdf.')
                return render_template('profile_student.html', is_update= False, uid=uid, major ="", 
                    minor="", loc ="", des="", resume="")
            else:
                # get the file and save the file
                user_filename = f.filename
                ext = user_filename.split('.')[-1]
                filename = secure_filename('{}.{}'.format(uid,ext))
                pathname = os.path.join(app.config['UPLOADS'],filename)
                f.save(pathname)
                # insert the student into the database
                user_reg.insert_student_profile(conn,uid,name,major,minor,filename,prefLoc,description)
                # store user info in session
                session['logged_in'] = True
                return redirect(url_for('welcome_student', uid=uid))
        except Exception as err:
            flash('Upload failed {why}'.format(why=err))
            #although we can retrieve user's input (which is a better way to implement), we'll give students a blank form for now 
            return render_template('profile_student.html', is_update= False,  uid = uid, major ="", 
                    minor="", loc ="", des="", resume="")

@app.route('/update_profile', methods=['GET','POST'])
def update_profile():
    ''' This method is for profile update'''
    if not session['logged_in']:
        return redirect(url_for('logout'))
    conn = dbi.connect()
    session_account_type = session['account_type']
    session_uid = session['uid']
    session_email = session['email']
    if request.method == 'GET': 
        #render the template with information from the student database
        if session_account_type == "Student":
            dic = update.retrieve_student_profile(conn,session_uid)
            major = dic['major']
            minor = dic['minor']
            resume = dic['file']
            # file = send_from_directory(app.config['UPLOADS'], resume)
            loc = dic['preferredLocation']
            des = dic['description']
            return render_template("profile_student.html", is_update= True, uid = session_uid, major = major, 
                    minor = minor, loc = loc, des= des, resume=resume, uploadMsg=uploadMsg)
        #render the template with information from the referrer database
        elif session_account_type == "Referrer":
            dic = update.retrieve_referrer_profile(conn,session_uid)
            company = dic['company']
            position = dic['position']
            emailPrefer = dic['emailPrefer']
            otherContact = dic['otherContact']
            linkedin = dic['linkedin']
            phoneNumber = dic['phoneNumber']
            return render_template('profile_referrer.html', is_update= True, uid = session_uid, company=company, 
                    position=position,emailPrefer=emailPrefer, otherContact=otherContact, 
                    linkedin=linkedin, phoneNumber=phoneNumber)
    else:
        #update the profile
        if session_account_type == "Student":
            try:
                # get parameters from the form
                major = request.form.get('major')
                minor = request.form.get('minor')
                prefLoc = request.form.get('prefLoc')
                description = request.form.get('description')
                name = user_reg.retrieve_user(conn, session_uid)
                f = request.files['resume']
                if not user_reg.allowed_file(f.filename):
                    flash('Incorrect file format. Only support txt, doc, or pdf.')
                    return render_template('profile_student.html', is_update= True, uid = session_uid, major = major, 
                    minor = minor, loc = prefLoc, des= description, resume="")
                else:
                    user_filename = f.filename
                    ext = user_filename.split('.')[-1]
                    filename = secure_filename('{}.{}'.format(session_uid,ext))
                    pathname = os.path.join(app.config['UPLOADS'],filename)
                    f.save(pathname)
                    # send_file(returned_file, )
                    # return send_file(io.BytesIO(returned_file.data))

                    update.update_student_profile(conn,session_uid,major,minor,filename,prefLoc,description)
                    return redirect(url_for('welcome_student', uid=session_uid))
            except Exception as err:
                flash('Upload failed {why}'.format(why=err))
                #although we can retrieve user's input (which is a better way to implement), we'll give students a blank form for now 
                return render_template('profile_student.html', is_update= True, uid = session_uid, major ="", 
                    minor="", loc ="", des="", resume="") #redirect to page they are on and they can get a new blank form 
            #re-render the page filling in all information that they just sent us 
        elif session_account_type == "Referrer":
            name = user_reg.retrieve_user(conn, session_uid)
            company = request.form.get('company')
            position = request.form.get('position')
            emailPrefer = request.form.get('contactEmail')
            linkedin = request.form.get('linkedIn')
            phoneNumber = request.form.get('phnum')
            otherContact = request.form.get('otherContact')
            # if email format is invalid
            if not user_reg.check_valid_email(conn, emailPrefer):
                flash('Incorrect email format. Please re-enter.')
                return render_template('profile_referrer.html', is_update = True, uid=session_uid, company=company, 
                    position=position, emailPrefer="", otherContact=otherContact, 
                    linkedin=linkedin, phoneNumber=phoneNumber)
            update.update_referrer_profile(conn,session_uid,company,position,
        emailPrefer,otherContact,linkedin,phoneNumber)
            return redirect(url_for('welcome_referrer', uid=session_uid))

#QQQ: haven't implemented this yet
#  is this get only? Not sure since students can only check but not post anything right? 
@app.route('/welcome_student/<int:uid>' ,methods=['GET', 'POST'])
def welcome_student(uid):
    if not session['logged_in']:
        return redirect(url_for('logout')) 
    conn = dbi.connect()
    return render_template('welcome_student.html', uid=uid)

@app.route('/welcome_referrer/<int:uid>',methods=['GET','Post'])
def welcome_referrer(uid):
    if not session['logged_in']:
        return redirect(url_for('logout')) 
    conn = dbi.connect()
    return render_template('welcome_referrer.html',uid=uid)

@app.route('/welcome_admin/<int:uid>')
def welcome_admin(uid):
    if not session['logged_in']:
        return redirect(url_for('logout')) 
    conn = dbi.connect()
    return render_template('welcome_admin.html')

@app.route('/dashboard', methods=['GET'])
def dashboard():
    ''' This method is for redirecting to dashboard'''
    if not session['logged_in']:
        return redirect(url_for('logout')) 
    conn = dbi.connect()
    session_account_type = session['account_type']
    session_uid = session['uid']
    if session_account_type == "Student":
        return redirect(url_for('welcome_student', uid=session_uid))
    elif session_account_type == "Referrer":
        return redirect(url_for('welcome_referrer', uid=session_uid))
    
@app.route('/mainSearch/', methods=['GET', 'POST'])
def mainSearch():
    ''' This method is for our main search'''
    if not session['logged_in']:
        return redirect(url_for('logout')) 
    conn = dbi.connect()

    if request.method == 'GET':
        return render_template('mainSearch.html')
    else:
        query = request.form['query']
        search_by = request.form['search_by']
        print('You submitted {} and {}'.format(query, search_by))
        #if the user select search by position
        if search_by == 'position':
            results = search_handler.searchByPosition(conn, query)   
        #if the user select search by referrer
        elif search_by == 'referrer':
            results = search_handler.searchByReferrer(conn, query)
        #if the user select search by company
        else:
            results = search_handler.searchByCompany(conn, query)
        #if there is no result in the database
        if not results:
            desc = 'No results'
            msg = 'Please search another keywords.'
            return render_template('search.html', msg=msg, desc=desc)
        return render_template('search.html', results=results)

@app.route('/position_detail')
def position_detail():
    if not session['logged_in']:
        return redirect(url_for('logout')) 
    conn = dbi.connect()
    return render_template('position_detail.html')

@app.before_first_request
def startup():
    dbi.cache_cnf()
    dbi.use('referral_db')
    session['logged_in'] = False

if __name__ == '__main__':
    import os
    uid = os.getuid()
    app.debug = True
    app.run('0.0.0.0',uid)



import cs304dbi as dbi

def getPassword(conn, email):
    '''Returns the password and user_type as tuple'''
    curs = dbi.dict_cursor(conn)
    sql = '''select password, type
            from user 
            where email = %s'''
    curs.execute(sql, [email])
    result = curs.fetchone()
    if not result:
        return ("","")
    return (result['password'], result['type'])


import cs304dbi as dbi

def searchByPosition(conn, query):
    '''Returns a list of positions that match the keywords'''
    curs = dbi.dict_cursor(conn)
    list_of_keywords = percentageKeyword(query.split())
    sql = getSQL(len(list_of_keywords), "positionName")
    curs.execute(sql, list_of_keywords)
    return curs.fetchall()

def percentageKeyword(list_of_keywords):
    '''Generate list of keywords with % sign'''
    for i in range(len(list_of_keywords)):
        list_of_keywords[i] = '%' + list_of_keywords[i] + '%'
    return list_of_keywords

def searchByReferrer(conn, query):
    '''Returns a list of referrer id that match the referrer names'''
    curs = dbi.dict_cursor(conn)
    list_of_keywords = percentageKeyword(query.split())
    sql = getSQL(len(list_of_keywords), "referrerName")
    curs.execute(sql, list_of_keywords)
    return curs.fetchall()

def searchByCompany(conn, query):
    '''Returns a list of companies that match the keywords'''
    curs = dbi.dict_cursor(conn)
    list_of_keywords = percentageKeyword(query.split())
    sql = getSQL(len(list_of_keywords), "company")
    curs.execute(sql, list_of_keywords)
    return curs.fetchall()

def getSQL (length, search_by):
    '''Generate sql string'''
    sql = 'select * from jobPosition where '
    sql += (search_by + ' LIKE %s and ') * (length-1)
    sql += search_by + ' LIKE %s'
    return sql

# def getRIDList (referrer_ids):
#     '''Returns a string in the format of 
#     'rid = keyrid or rid = keyrid' '''
#     referrer_id_str = ""
#     for i, referrer_id in enumerated(referrer_ids):
#         if i == len(keywords) - 1:
#             referrer_id_str = "rid = " + referrer_id
#         else:
#             referrer_id_str = "rid = " + referrer_id + " or "
#     return referrer_id_str

# def getReferrerID(conn, query):
#     '''Returns a list of referrers/one referrer 
#         that matches the keywords'''
#     curs = dbi.dict_cursor(conn)
#     LIKE_keywords = getLIKEList(query, "name")
#     sql = '''select rid, name from referrer 
#             where name %s '''
#     curs.execute(sql, [LIKE_keywords])
#     return curs.fetchall()
import cs304dbi as dbi

def retrieve_student_profile(conn, uid):
    ''' Retrieve student profile using uid '''
    curs = dbi.dict_cursor(conn)
    sql = ''' select major, minor, file, preferredLocation, description 
                from student where sid = %s '''
    curs.execute(sql,[uid])
    return curs.fetchone()

def retrieve_referrer_profile(conn, uid):
    ''' Retrieve referrer profile using uid '''
    curs = dbi.dict_cursor(conn)
    sql = ''' select company, position, emailPrefer, otherContact, linkedin, phoneNumber
                from referrer where rid = %s '''
    curs.execute(sql,[uid])
    return curs.fetchone()

def update_student_profile(conn,sid,major,minor,file,loc,des):
    ''' Update student profile using sid '''
    curs = dbi.dict_cursor(conn)
    sql = ''' update student set 
            major=%s, minor=%s, file=%s, preferredLocation=%s, description=%s 
            where sid=%s '''
    curs.execute(sql,[major,minor,file,loc,des,sid])
    conn.commit()

def update_referrer_profile(conn,rid,company,position,emailPrefer,otherContact,linkedin,phoneNumber):
    ''' Update Referrer profile using rid '''
    curs = dbi.dict_cursor(conn)
    sql = ''' update referrer set 
            company=%s, position=%s, emailPrefer=%s, otherContact=%s, 
            linkedin=%s, phoneNumber=%s
            where rid=%s'''
    curs.execute(sql,[company,position,emailPrefer,otherContact,linkedin,phoneNumber,rid])
    conn.commit()
import cs304dbi as dbi
import re

regex = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'

ALLOWED_EXTENSIONS = {'txt', 'pdf', 'doc'}

def insert_user_db(conn,name,email,password,year,account_type):
    '''insert a new user into database, the password here is after salt'''
    try: 
        curs = dbi.dict_cursor(conn)
        sql = '''INSERT INTO user (name, email, password,
        classYear,type) VALUES (%s,%s,%s,%s,%s)'''
        curs.execute(sql,[name,email,password,year,account_type])
        conn.commit()
    except Exception as err:
        print('something went wrong', repr(err))
        
def insert_student_profile (conn,sid,name,major,minor,
    file,preferredLocation,description):
    '''insert a new student into database'''
    try: 
        curs = dbi.dict_cursor(conn)
        sql = '''INSERT INTO student (sid, name, major, minor, file,
        preferredLocation,description) VALUES (%s,%s,%s,%s,%s,%s,%s)'''   
        curs.execute(sql,[sid,name,major,minor,file,preferredLocation,description])
        conn.commit()
    except Exception as err:
        print('something went wrong', repr(err))

def insert_referrer_profile(conn,rid,name,company,position,
    emailPrefer,otherContact,linkedin,phoneNumber):
    '''insert a new referrer into database'''
    try: 
        curs = dbi.dict_cursor(conn)
        sql = '''INSERT INTO referrer (rid,name,company,position,emailPrefer,
            otherContact,linkedin,phoneNumber) VALUES (%s,%s,%s,%s,%s,%s,%s,%s)'''
        curs.execute(sql,[rid,name,company,position,
        emailPrefer,otherContact,linkedin,phoneNumber])
        conn.commit()
    except Exception as err:
        print('something went wrong', repr(err))

def insert_admin_profile(conn,aid):
    ''' Retreive admin from admin table with provided aid'''
    curs = dbi.dict_cursor(conn)
    sql = '''INSERT INTO admin (aid, name, major, minor,file,
    preferredLocation,description) VALUES (%s,%s,%s,%s,%s,%s,%s)'''    
    curs.execute(sql,[sid,name,major,minor,file,preferredLocation,description])
    conn.commit()

def retrieve_user(conn, uid):
    ''' Retrieve user name from user table with provided uid '''
    curs = dbi.dict_cursor(conn)
    sql = '''select name from user where uid = %s'''
    curs.execute(sql,[uid])
    return curs.fetchone()["name"]

def allowed_file(filename):
    ''' Determine whether the file is allowed '''
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def retrieve_uid(conn, email):
    ''' Retrieve uid from user table with provided email, if not exist, return None '''
    curs = dbi.dict_cursor(conn)
    sql = '''select uid from user where email = %s'''
    curs.execute(sql,[email])
    dic = curs.fetchone()
    if dic != None:
        return dic["uid"]
    else:
        return dic

def check_email(conn,email):
    '''Check if email already in db, return true if it exists'''
    curs = dbi.dict_cursor(conn)
    sql = '''select email from user where email = %s'''
    curs.execute(sql,[email])
    if curs.fetchone() != None:
        return True
    else:
        return False

def check_valid_email(conn, email):
    ''' Check if email is in valid format '''
    if(re.fullmatch(regex, email)):
        return True
    else:
        print("Invalid Email")
        return False<!doctype html>
<html lang='en'>

<head>
    <meta charset='utf-8'>
    <meta name=author content="Annie Liu and Michelle Zhao">
    <title>Base Header</title>
    <link rel='stylesheet' href="{{ url_for('static',filename = 'style.css') }}">
</head>

<body>
    <div class="base_header">
        <a href="" class="header_btn">Message Center</a>
        <a href="{{ url_for('dashboard') }}" class="header_btn">Dashboard</a>
        <a href="{{ url_for('logout') }}" class="header_btn">Logout</a>

        {% block header %}
        {% endblock %}
    </div>

    <div id="main">
        {% block main %}
        {% endblock %}
    </div>

</body><!doctype html>
<html lang='en'>
<head>
    <meta charset='utf-8'>
    <meta name=author content="Annie Liu">
    <title>Base Registration Page</title>
    <link rel='stylesheet' href="{{ url_for('static',filename = 'style.css') }}">
</head>

<body>

    {% if msg %}
    <div id="message">
        <p class = "error">{{msg}}</p>
    </div>
    {% endif %}

    <div class="reg-container">
        <p class="login-title">Registration</p>
        <form id="reg-form" method="POST" action= "{{url_for('base_registration')}}">
            <table class="reg-table">
                <tr>
                    <td><label for="name">Name<span class="required">*</span></label></td>
                    <td><input class="regInput" type="text" id="name" name= "name" placeholder="Name" required></td>
                </tr>
                <tr>
                    <td><label for="email">Email<span class="required">*</span></label></td>
                    <td><input class="regInput" id="email" name="email" placeholder="Email" required></td>
                </tr>
                <tr>
                    <td><label for="password">Password<span class="required">*</span></label></td>
                    <td><input class="regInput" id="password" name="password" placeholder="Password" required></td>
                </tr>
                <tr>
                    <td><label for="classyear">Class year<span class="required">*</span></label></td>
                    <td><input class="regInput" id="classyear" type="number" name="classyear" required></td>
                </tr>
                <tr>
                    <td><label for="accountType">Account type<span class="required">*</span></label></td>
                    <td><select class="regInput" id="accountType" name="accountType" required>
                        <option value="">select</option>
                        <option value="Student">Student Account</option>
                        <option value="Referrer">Referrer Account</option>
                        <option value="Admin">Admin</option>
                    </select></td>
                </tr>
            </table>
            <input class="next" type="submit" value="Next">
        </form>
    </div>
</body>
</html><!doctype html>
<html lang='en'>
<head>
    <meta charset='utf-8'>
    <meta name=author content="Annie Liu">
    <title>Base Detail Page</title>
    <link rel='stylesheet' href="{{ url_for('static',filename = 'style.css') }}">
</head>

<body>
    <div class="detail-container">
        {% block content %}
        {% endblock %}
    </div>
</body>
</html><!doctype html>
<html lang='en'>

<head>
    <meta charset='utf-8'>
    <meta name=author content="Annie Liu">
    <title>Main Sign In Page</title>
    <link rel='stylesheet' href="{{ url_for('static',filename = 'style.css') }}">
</head>

<body>
    {% with message = get_flashed_messages() %}
    {% if message %}
    <div id="message">
        <p class = "error">{{message}}</p>
    </div>
    {% endif %}
    {% endwith %}

    <div class="login-container">
        <p class="login-title">Sign in</p>
        <form id="login-form" method="POST" action = "{{url_for('login')}}">
            <input class="loginInfo" aria-label="Email" type="text" name="email" placeholder="Email" required>
            <input class="loginInfo" aria-label="Passowrd" type="text" name="password" placeholder="Password" required>

            <input class="signIn" name="submit" type="submit" value="Sign In">
        </form>
        <a href="{{url_for('base_registration')}}" class="signUp">Sign Up</a>
    </div>
    <!-- <a href="#">Forgot Username / Password?</a> -->
</body>

</html>{% extends "baseHeader.html" %}
{% block main %}

<table class="search_table">
    <tr>
        <td>
            <div class="searchFormContainer">
                <h1 class="searchTitle">Referral Database</h1>
                <p class="searchSubtitle">Are you looking for a referral? Here is the right place for you!</p>
                <form class="search" method="POST" action="{{url_for('mainSearch')}}">
                    <input class="search_input" aria-label="Search" type="text" name="query"
                        placeholder="Search for job position" required>
                    <input type="submit" class="search_btn" value="Search">
                    <fieldset class="search_by_button_grp" id="radio_button_group">
                        <input type="radio" id="position_name" name="search_by" value="position" checked>
                        <label for="position_name">Position Name</label>
                        <input type="radio" id="referrer" name="search_by" value="referrer">
                        <label for="referrer">Referrer</label>
                        <input type="radio" id="company" name="search_by" value="company">
                        <label for="company">Company</label>
                    </fieldset>
                </form>
            </div>
        </td>
    </tr>
</table>

<div id="content">
    {% block content %}
    {% endblock %}
</div>

{% endblock %}<!-- checked -->
{% extends "detail_template.html" %}
{% block content %}

<div>
    <h1 class = position_title>Software Engineer</h1>
    <table class="position-table">
        <tr>
            <td class="detaillabel"><label class="positionInfo">Location</label></td>
            <td class="detailInfo"><p>Boston, MA</p></td>
        </tr>
        <tr>
            <td class="detaillabel"><label class="positionInfo">Company</label></td>
            <td class="detailInfo"><p>Google</p></td>
        </tr>
        <tr>
            <td class="detaillabel"><label class="positionInfo">Deadline</label></td>
            <td class="detailInfo"><p>December-12-2021</p></td>
        </tr>
        <tr>
            <td class="detaillabel"><label class="positionInfo">Material Needed</label></td>
            <td class="detailInfo"><p>Resume</p></td>
        </tr>
        <tr>
            <td class="detaillabel"><label class="positionInfo">Contact Information</label></td>
            <td class="detailInfo"><p>Linkedin</p></td>
        </tr>
    </table>

    <button onclick= "{{ url_for('mainSearch') }}">Back</button>
</div>

{% endblock %}{% extends "profile_template.html" %}
{% block content %}

{% with message = get_flashed_messages() %}
{% if message %}
<div id="message">
    <p class="error">{{message}}</p>
</div>
{% endif %}
{% endwith %}

{% if is_update %}
<form id="referrer-profile-form" method="POST" action="{{url_for('update_profile', uid = uid )}}">
{% endif %}

{% if not is_update%}
<form id="referrer-profile-form" method="POST" action="{{url_for('profile_referrer', uid = uid )}}">
{% endif %}
    <table class="reg-table">
        <tr>
            <td><label for="company">Company<span class="required">*</span></label></td>
            <td><input class="regInput" id="company" name="company" placeholder="Enter Company" value="{{company}}" required></td>
        </tr>
        <tr>
            <td><label for="position">Position<span class="required">*</span></label></td>
            <td><input class="regInput" id="position" name="position" placeholder="Enter your Job Position" value="{{position}}" required>
            </td>
        </tr>
        <tr>
            <td><label for="contactEmail">Contact Email<span class="required">*</span></label></td>
            <td><input class="regInput" id="contactEmail" name="contactEmail" placeholder="Enter your email" value="{{emailPrefer}}" required>
            </td>
        </tr>
        <tr>
            <td><label for="linkedIn">LinkedIn</label></td>
            <td><input class="regInput" id="linkedIn" name="linkedIn" placeholder="Enter your linkedin profile link" value="{{linkedin}}" >
            </td>
        </tr>
        <tr>
            <td><label for="phnum">Phone Number</label></td>
            <td><input class="regInput" id="phnum" name="phnum" type="number" placeholder="Enter Phone number" value="{{phoneNumber}}"></td>
        </tr>
        <tr>
            <td><label for="otherContact">Other Contact Method</label></td>
            <td><input class="regInput" id="otherContact" name="otherContact" placeholder="Enter other contact method" value="{{otherContact}}">
            </td>
        </tr>
    </table>
    <input class="save_profile" type="submit" value="Save Profile">
</form>

{% endblock %}{% extends "profile_template.html" %}
{% block content %}

{% with message = get_flashed_messages() %}
{% if message %}
<div id="message">
    <p class="error">{{message}}</p>
</div>
{% endif %}
{% endwith %}

{% if is_update %}
<form id="student-profile-form" method="POST" action = "{{url_for('update_profile',uid = uid)}}" enctype="multipart/form-data">
{% endif %}
{% if not is_update%}
<form id="student-profile-form" method="POST" action = "{{url_for('profile_student',uid = uid)}}" enctype="multipart/form-data">
{% endif %}
    <table class="student-table">
        <tr>
            <td><label for="major">Major<span class="required">*</span></label></td>
            <td><input class="regInput" id="major" name="major" placeholder="Enter Your Major" value="{{major}}"
                    required></td>
        </tr>
        <tr>
            <td><label for="minor">Minor</label></td>
            <td><input class="regInput" id="minor" name="minor" placeholder="Enter Your Minor" value="{{minor}}"></td>
        </tr>
        <tr>
            <td><label for="prefLoc">Preferred Location</label></td>
            <td><input class="regInput" id="prefLoc" name="prefLoc" placeholder="Enter Your Preferrer Location"
                    value="{{loc}}"></td>
        </tr>
        <tr>
            <td><label for="description">Description</label></td>
            <td><input class="regInput" id="description" name="description"
                    placeholder="Enter a Description of yourself" value="{{des}}"></td>
        </tr>
        <tr>
            <td><label for="resume">Resume<span class="required">*</span></label></td>
            <td><input type="file" class="fileUpload" id="resume" name="resume" value="{{resume}}" required>
        </tr>
    </table>
    <input class="save_profile" type="submit" value="Save Profile">
</form>

{% endblock %}<!doctype html>
<html lang='en'>
<head>
    <meta charset='utf-8'>
    <meta name=author content="Michelle Zhao">
    <title>Welcome Page Template</title>
    <link rel='stylesheet' href="{{ url_for('static',filename = 'style.css') }}">
</head>

<body>
    <div class="profile-container">
        <h1 class = profile_title>Profile Settings</h1>
        {% block content %}
        {% endblock %}
    </div>
</body>
</html>{% extends "mainSearch.html" %}
{% block content %}

<div class="queryResult">
    {% if results %}
        <table class="search_result">
            <th>Position Name</th>
            <th>Company</th>
            <th>Referrer</th>
            <th>View Detail</th>
            {% for result in results %}
            <tr>
                <td>{{result.positionName}}</td>
                <td>{{result.company}}</td>
                <td>{{result.referrerName}}</td>
                <td><button class="detailButton" type="button">View Detail</button>
            </tr>
            {% endfor %}
        </table>
    {% endif %}

    {% if msg %}
    <div id="message">
        <h1 class="error">{{ desc }}</h1>
        <p class="error">{{msg}}</p>
    </div>
    {% endif %}
</div>

{% endblock %}
<!-- to be implemented  -->
{% extends "welcome.html" %}
{% block welcome_content %}
<p class="login-title">Announcement Submission</p>
        <form id="announcement-form" method="" action="{{url_for('profile_admin')}}">
            <p><label>Announcement <input type="text" placeholder="Enter your announcement there"></label><br>
            <input class="next" type="submit" value="announcement">
        </form>

{% endblock %}
{% extends "baseHeader.html" %}
{% block main %}

<div class="searchFormContainer">
    <div id="welcome_content">
        {% block welcome_content %}
        {% endblock %}
    </div>
</div>

{% endblock %}{% extends "welcome.html" %}

{% block header %}
<a href="{{ url_for('update_profile') }}" class="header_btn">Update Profile</a>
<a href="" class="header_btn">New Position</a>
{% endblock %}

{% block welcome_content %}
<div>
  <h1 class=welcomeBack>Welcome Back, Referrer!</h1>
  <h2 class="dashboard">Your DashBoard</h2>

  <div class="referrer-dashboard-container">
    <div class="referrer-dashboard">
      <table class="dashboard_table">
        <tr>
          <th>Name</th>
          <th>Position Applied</th>
          <th>Status</th>
          <th>View Detail</th>
        </tr>
        <!-- {% for result in results%} -->
        <!-- <td>{{result.name}}</td> -->
        <!-- <td>{{result.position}}</td> -->
        <!-- default waiting  -->
        <!-- <td>{{result.status}}</td>  -->
        <!-- <td><li><button class="nav dropButton" type="button">Tags</button>
          <div id="tagDropDown" class="dropClickContent">
              <h2>Click Me</h2>
          </div>
      </li></td>  -->

        <!-- {% endfor %} -->

        <tr>
          <td>Sally</td>
          <td>UI/UX Application</td>
          <td>Accept</td>
          <td><button class="dropButton" type="button">View Detail</button>
        </tr>
        <tr>
          <td>Name_sample</td>
          <td>UI/UX Application</td>
          <td>Decline</td>
          <td><button class="dropButton" type="button">View Detail</button>
        </tr>
      </table>
    </div>

    <div class="referrer-detail">
      <ul id="Details">
        <!-- dynamically put detail info in this-->
        <!-- accept/decline button-->
        <li>"HELLO"<p>
      </ul>
    </div>
  </div>
</div>

{% endblock %}{% extends "welcome.html" %}

{% block header %}
<a href="{{url_for('update_profile') }}" class="header_btn">Update Profile</a>
<a href="{{ url_for('mainSearch')}}" class="header_btn">Search</a>

{% endblock %}

{% block welcome_content %}
<div>
  <h1 class=welcomeBack>Welcome Back, Student!</h1>
  <h2 class="dashboard">Your DashBoard</h2>
  <table class=dashboard_table>
    <tr>
      <th>Name</th>
      <th>Details</th>
      <th>Status</th>
    </tr>
    <tr>
      <td>Ally</td>
      <td>SWE Application</td>
      <td>Waiting</td>
    </tr>
    <tr>
      <td>Sally</td>
      <td>UI/UX Application</td>
      <td>Accept</td>
    </tr>
    <tr>
      <td>Name_sample</td>
      <td>UI/UX Application</td>
      <td>Decline</td>
    </tr>
  </table>
</div>

{% endblock %}body{
  font-family: 'Open Sans', sans-serif;
  background:#F3EBF6;
  margin: 0 auto 0 auto;  
  width:100%; 
  text-align: center;
  font-size: 15px;
}

.base_header {
  margin-top: 20px;
  text-align: right;
  padding-right: 20px;
}

.header_btn, .signUp {
  cursor: pointer;
  border-radius: 5em;
  color: #fff;
  background: linear-gradient(to right, #9C27B0, #E040FB);
  text-decoration: none;
}

.header_btn {
  padding: 10px 15px;
}

.signUp {
  font-size: 15px;
  padding: 10px 20px;
}

/* Base Login Form */
.login-title, .profile_title{
  padding-top: 60px;
  color: #8C55AA;
  font-weight: bold;
  font-size: 25px;
  padding-bottom: 20px;
}

.position_title {
  padding-top: 60px;
  color: #8C55AA;
  font-weight: bold;
  font-size: 40px;
  text-align: left;
  padding-left: 100px;
}

.login-container, .reg-container, .profile-container {
  background-color: #FFFFFF;
  margin: 8em auto;
  border-radius: 1.5em;
  box-shadow: 0px 11px 35px 2px rgba(0, 0, 0, 0.14);
}

.login-container {
  width: 400px;
  height: 400px;
}

.reg-container {
  width: 600px;
  height: 600px;
}

.profile-container {
  width: 600px;
  height: 650px;
}

.detail-container {
  background-color: #FFFFFF;
  margin: 4em auto;
  border-radius: 1.5em;
  box-shadow: 0px 11px 35px 2px rgba(0, 0, 0, 0.14);
  width: 90%;
  height: 800px;
}

.loginInfo, .regInput {
  width: 80%;
  color: rgb(38, 50, 56);
  font-weight: 700;
  letter-spacing: 1px;
  background: rgba(136, 126, 126, 0.04);
  padding: 10px;
  border-radius: 20px;
  border: 2px solid rgba(0, 0, 0, 0.02);
  margin-bottom: 20px;
  text-align: center;
}

.loginInfo:focus, .regInput:focus {
  border: 2px solid #592693 !important;
}

.signIn, .next, .save_profile, .search_btn{
  margin-top: 20px;
  cursor: pointer;
  border-radius: 5em;
  color: #fff;
  background: linear-gradient(to right, #9C27B0, #E040FB);
  padding-top: 10px;
  padding-bottom: 10px;
  text-align: center;
  width: 100px;
}

.signIn {
  font-size: 15px;
  margin-bottom: 20px;
}

/* Base Registration Form */
.reg-table {
  padding-top: 30px;
  width: 90%;
}

.student-table {
  padding-top: 70px;
  width: 90%;
  padding-bottom: 20px;
}

.position-table {
  padding-top: 70px;
  width: 90%;
  padding-bottom: 20px;
}

.detaillabel {
  width: 30%;
  font-size: 30px;
}

.detailInfo {
  padding-left: 20px;
  text-align: left;
  font-size: 20px;
}

.next {
  margin-top: 30px;
}

/* Main Search Form */
.searchSubtitle {
  color: rgb(132, 82, 157);
  font-style: italic;
  font-size: 18px;
}

.search_input { 
  background: #fff;
  height: 30px;
  border-radius: 2em;
  border-color: #8C55AA;
  padding: 10px 20px;
  margin-left: 10px;
  cursor: pointer;
  width: 600px;
  font-size: 15px;
}

.searchTitle {
  padding-top: 20px;
  color: #8C55AA;
  font-weight: bold;
  font-size: 40px;
}

.header {
  margin-top: 20px;
  margin-bottom: 50px;
}

.search_by_button_grp {
  border: none;
  margin-bottom: 30px;
}

.search_table, .search_result {
  width: 100%;
}

.search_result {
  padding-left: 50px;
  padding-right: 50px;
}

h1 { 
  font-family:cursive; 
  font-size: 45px;
  font-weight: normal; 
  line-height: 48px;
  margin: 0; 
}

.welcomeBack{
  margin-top: 20px;
  color:#5D0DD0;
}

.dashboard_table td,th, .search_result td, th{
    border: 1px solid #dddddd;
    text-align: left;
    padding: 8px;
}

.dashboard_table {
  width: 90%;
}

.dashboard {
  color:purple;
}

.welcome_content{
  text-align: center;
  border-style: double;

}

.referrer-dashboard-container {
  padding: 20px;
  margin: auto;
}

.referrer-dashboard {
    width: 45%;
    float: left;
}

.referrer-detail {
  width: 45%;
  float: right;
  /* padding: 20px; */
}

.error {
  color: red;
  font-weight: bold;
}

.required{
  color:red;
}