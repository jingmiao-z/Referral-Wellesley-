====================== app.py =====================
from flask import (Flask, url_for, render_template, request, redirect, flash, session, send_from_directory, jsonify)
import sys, os, random, io 
import bcrypt
import cs304dbi as dbi
from datetime import timedelta
from werkzeug.utils import secure_filename
import login_handler, search_handler, user_reg, update, job_handler, message_center, refer_handler
app = Flask(__name__)
app.secret_key = 'your secret here'
# replace that with a random key
app.secret_key = ''.join([ random.choice(('ABCDEFGHIJKLMNOPQRSTUVXYZ' +
                                          'abcdefghijklmnopqrstuvxyz' +
                                           '0123456789'))
                           for i in range(20) ])
# This gets us better error messages for certain common request errors
app.config['TRAP_BAD_REQUEST_ERRORS'] = True
# new for file upload
app.config['UPLOADS'] = 'uploads'
app.config['MAX_CONTENT_LENGTH'] = 1*1024*1024 # 1 MB

#Login page deal with old user login
@app.route('/', methods=['GET','POST'])
def login():
    ''' This is our main login page.'''
    conn = dbi.connect()
    # get values from cookies
    session_uid = session.get('uid')
    session_email = session.get('email')
    session_account_type = session.get('account_type')

    if not session_email:
        # case 1: first visit
        if request.method == 'GET':
            return render_template('login.html')
        # case 2: user submitted a form with their name
        elif request.method == 'POST':
            # if user clicked sign in button
            if request.form['submit'] == 'Sign In':
                email = request.form['email']
                inputPass = request.form['password']
                # check if email exists
                if user_reg.check_email(conn,email):
                    # find password from db 
                    stored, user_type = login_handler.getPassword (conn,email)
                    # hash the input password
                    hashedInput = bcrypt.hashpw(inputPass.encode('utf-8'), stored.encode('utf-8'))
                    hashedInputPass = hashedInput.decode('utf-8')
                    uid = int(user_reg.retrieve_uid(conn, email))
                    # if hashed input pass is equal to the stored password
                    if uid and hashedInputPass == stored:
                        session['uid'] = uid 
                        session['email']  = email
                        session['account_type'] = user_type
                        session['logged_in'] = True
                        if user_type == 'Student':
                            return redirect(url_for('welcome_student', uid=uid))
                        elif user_type == 'Referrer':
                            return redirect(url_for('welcome_referrer', uid=uid))
                        else:
                            return redirect(url_for('welcome_admin', uid=uid))
                    else:
                        flash("Incorrect password. Please try again.")
                        return render_template('login.html')
                else:
                    flash("Account not found. Please register.")
                    return render_template('login.html')
            else:
                return redirect(url_for('base_registration'))
    else:
        # case 3: a regular visit ï¼Ÿ
        if request.method == "GET":
            if session_account_type == 'Student':
                return redirect(url_for('welcome_student', uid=session_uid))
            elif session_account_type == 'Referrer':
                return redirect(url_for('welcome_referrer', uid=session_uid))
            else:
                return redirect(url_for('welcome_admin', uid=session_uid))

#logout route, pop all the sessions
@app.route('/logout/')
def logout():
    ''' This is a function for logout '''
    if session['logged_in']:
        session.pop('uid')
        session.pop('email')
        session.pop('account_type')
        session['logged_in'] = False
        flash('You are logged out.')
        return redirect(url_for('login'))
    else:
        flash('You are not logged in. Please login.')
        return redirect(url_for('login'))

@app.route('/base_registration/',methods=['GET', 'POST'])
def base_registration():
    ''' This is our base registration page. '''
    conn = dbi.connect()
    if request.method == 'GET':
        return render_template('baseRegForm.html')
    else:
        # get parameters from the form
        name = request.form.get('name')
        password = request.form.get('password')
        email = request.form.get('email')
        # if email format is invalid
        if not user_reg.check_valid_email(conn, email):
            msg = 'Incorrect email format. Please re-enter.'
            return render_template('baseRegForm.html', msg=msg)
        # if email already exist, cannot re-register 
        if user_reg.check_email(conn,email):
            flash('Email exists, please sign in instead')
            return redirect(url_for("login"))
        year = request.form.get('classyear')
        accountType = request.form.get('accountType')
        # hash the password
        hashed = bcrypt.hashpw(password.encode('utf-8'),
                    bcrypt.gensalt())
        stored_password = hashed.decode('utf-8')
        # insert a new user into the database
        user_reg.insert_user_db(conn,name,email,stored_password,year,accountType)
        # retrieve the user's uid from the database
        uid = int(user_reg.retrieve_uid(conn,email))
        # determine what page to be redirected
        if accountType ==  "Student":
            session['uid'] = uid 
            session['email']  = email
            session['account_type'] = accountType
            return redirect(url_for("profile_student", uid = uid))
        elif accountType ==  "Referrer":
            session['uid'] = uid 
            session['email']  = email
            session['account_type'] = accountType
            return redirect(url_for("profile_referrer", uid = uid))

@app.route('/profile_referrer/<int:uid>', methods=['GET', 'POST'])
def profile_referrer(uid):
    ''' This is our profile page for referrer. ''' 
    conn = dbi.connect()
    if request.method == 'GET':
        return render_template('profile_referrer.html', uid = uid, dic={})
    else:
        dic = {}
        name = user_reg.retrieve_user(conn, uid)
        dic['company'] = request.form.get('company')
        dic['position'] = request.form.get('position')
        emailPrefer = request.form.get('contactEmail')
        # if email format is invalid
        if not user_reg.check_valid_email(conn, emailPrefer):
            flash('Incorrect email format. Please re-enter.')
            return render_template('profile_referrer.html', dic=dic, uid=uid)
        dic['emailPrefer'] = emailPrefer
        dic['linkedin'] = request.form.get('linkedIn')
        dic['phoneNumber'] = request.form.get('phnum')
        dic['otherContact'] = request.form.get('otherContact')
        user_reg.insert_referrer_profile(conn,uid,name,dic['company'],dic['position'],
    dic['emailPrefer'],dic['otherContact'],dic['linkedin'], dic['phoneNumber'])
        session['logged_in'] = True
        return redirect(url_for('welcome_referrer', uid=uid))

#profile route for referrer
@app.route('/profile_student/<int:uid>', methods=['GET', 'POST'])
def profile_student(uid):
    ''' This is our profile page for student. ''' 
    conn = dbi.connect()
    if request.method == 'GET':
        return render_template('profile_student.html', msg="", uid=uid, dic={})
    else:
        try:
            dic = {}
            # get parameters from the form
            dic['major'] = request.form.get('major')
            dic['minor'] = request.form.get('minor')
            dic['preferredLocation'] = request.form.get('prefLoc')
            dic['description'] = request.form.get('description')
            name = user_reg.retrieve_user(conn, uid)
            f = request.files['resume']
            # if the format of file is not allowed
            if not user_reg.allowed_file(f.filename):
                flash('Incorrect file format. Only support txt, doc, or pdf.')
                return render_template('profile_student.html', is_update= False, uid=uid, dic=dic)
            else:
                # get the file and save the file
                user_filename = f.filename
                ext = user_filename.split('.')[-1]
                filename = secure_filename('{}.{}'.format(uid,ext))
                pathname = os.path.join(app.config['UPLOADS'],filename)
                f.save(pathname)
                # insert the student into the database
                user_reg.insert_student_profile(conn,uid,name,dic['major'],
                    dic['minor'],filename,dic['preferredLocation'],dic['description'])
                # store user info in session
                session['logged_in'] = True
                return redirect(url_for('welcome_student', uid=uid))
        except Exception as err:
            flash('Upload failed {why}'.format(why=err))
            #although we can retrieve user's input (which is a better way to implement), we'll give students a blank form for now 
            return render_template('profile_student.html', is_update= False, uid = uid, dic={})

@app.route('/update_profile/', methods=['GET','POST'])
def update_profile():
    ''' This method is for profile update'''
    if not session['logged_in']:
        return redirect(url_for('logout'))
    conn = dbi.connect()
    session_account_type = session['account_type']
    session_uid = session['uid']
    session_email = session['email']
    if request.method == 'GET': 
        #render the template with information from the student database
        if session_account_type == "Student":
            dic = update.retrieve_student_profile(conn,session_uid)
            return render_template("profile_student.html", is_update= True, uid = session_uid, dic=dic)
        #render the template with information from the referrer database
        elif session_account_type == "Referrer":
            dic = update.retrieve_referrer_profile(conn,session_uid)
            return render_template('profile_referrer.html', is_update= True, uid = session_uid, dic=dic)
    else:
        #update the profile
        if session_account_type == "Student":
            try:
                # get parameters from the form
                dic = {}
                dic['major'] = request.form.get('major')
                dic['minor'] = request.form.get('minor')
                dic['preferredLocation'] = request.form.get('prefLoc')
                dic['description'] = request.form.get('description')
                f = request.files['resume']
                if not user_reg.allowed_file(f.filename):
                    flash('Incorrect file format. Only support txt, doc, or pdf.')
                    return render_template('profile_student.html', is_update= True, uid = session_uid, dic = dic)
                else:
                    user_filename = f.filename
                    ext = user_filename.split('.')[-1]
                    filename = secure_filename('{}.{}'.format(session_uid,ext))
                    pathname = os.path.join(app.config['UPLOADS'],filename)
                    f.save(pathname)
                    update.update_student_profile(conn,session_uid,dic['major'],dic['minor'],
                    filename,dic['preferredLocation'],dic['description'])
                    return redirect(url_for('welcome_student', uid=session_uid))
            except Exception as err:
                flash('Upload failed {why}'.format(why=err))
                #although we can retrieve user's input (which is a better way to implement), we'll give students a blank form for now 
                return render_template('profile_student.html', is_update= True, uid = session_uid) #redirect to page they are on and they can get a new blank form             #re-render the page filling in all information that they just sent us 
        elif session_account_type == "Referrer":
            dic = {}
            dic['company'] = request.form.get('company')
            dic['position'] = request.form.get('position')
            emailPrefer = request.form.get('contactEmail')
            if not user_reg.check_valid_email(conn, emailPrefer):
                flash('Incorrect email format. Please re-enter.')
                return render_template('profile_referrer.html', is_update = True, uid=session_uid, dic=dic)
            dic['linkedin'] = request.form.get('linkedIn')
            dic['phoneNumber'] = request.form.get('phnum')
            dic['otherContact'] = request.form.get('otherContact')
            # if email format is invalid
            dic['emailPrefer'] = emailPrefer
            update.update_referrer_profile(conn,session_uid,dic['company'],dic['position'],
                dic['emailPrefer'],dic['otherContact'],dic['linkedin'], dic['phoneNumber'])
            return redirect(url_for('welcome_referrer', uid=session_uid))

@app.route('/welcome_student/<int:uid>' ,methods=['GET'])
def welcome_student(uid):
    '''This method is used for student dashboard'''
    if not session['logged_in']:
        return redirect(url_for('logout')) 
    conn = dbi.connect()
    pid = job_handler.retrieve_pid(conn, uid)
    if not pid:
        msg = 'No active referral application'
        return render_template('welcome_student.html', msg=msg)
    positions = job_handler.retrieve_applied_positions(conn, uid)
    return render_template('welcome_student.html', positions=positions)

@app.route('/welcome_referrer/<int:uid>',methods=['GET'])
def welcome_referrer(uid):
    ''' This method is used for referrer dashboard'''
    if not session['logged_in']:
        return redirect(url_for('logout')) 
    conn = dbi.connect()
    results = job_handler.retrieve_applied_student(conn, uid)
    if not results:
        msg = 'No student applied'
        return render_template('welcome_referrer.html', msg=msg)
    return render_template('welcome_referrer.html',uid=uid,results = results)

@app.route('/welcome_admin/<int:uid>')
def welcome_admin(uid):
    ''' This method is used for admin dashboard'''
    if not session['logged_in']:
        return redirect(url_for('logout'))
    conn = dbi.connect()
    return render_template('welcome_admin.html')

@app.route('/dashboard/', methods=['GET'])
def dashboard():
    ''' This method is for redirecting to dashboard'''
    if not session['logged_in']:
        return redirect(url_for('logout')) 
    conn = dbi.connect()
    session_account_type = session['account_type']
    session_uid = session['uid']
    if session_account_type == "Student":
        return redirect(url_for('welcome_student', uid=session_uid))
    elif session_account_type == "Referrer":
        return redirect(url_for('welcome_referrer', uid=session_uid))
    
@app.route('/mainSearch/', methods=['GET', 'POST'])
def mainSearch():
    ''' This method is for our main search '''
    if not session['logged_in']:
        return redirect(url_for('logout')) 
    conn = dbi.connect()

    if request.method == 'GET':
        return render_template('mainSearch.html')
    else:
        query = request.form['query']
        search_by = request.form['search_by']
        print('You submitted {} and {}'.format(query, search_by))
        #if the user select search by position
        if search_by == 'position':
            results = search_handler.searchByPosition(conn, query)   
        #if the user select search by referrer
        elif search_by == 'referrer':
            results = search_handler.searchByReferrer(conn, query)
        #if the user select search by company
        else:
            results = search_handler.searchByCompany(conn, query)
        #if there is no result in the database
        if not results:
            desc = 'No results'
            msg = 'Please search another keywords.'
            return render_template('search.html', msg=msg, desc=desc)
        return render_template('search.html', results=results)

@app.route('/position_detail/<int:pid>', methods=['GET'])
def position_detail(pid):
    ''' This method is for position detail page '''
    if not session['logged_in']:
        return redirect(url_for('logout')) 
    conn = dbi.connect()
    position = job_handler.retrieve_position(conn, pid)
    referrer_contact = job_handler.retrieve_referrer_contact(conn, position['rid'])
    session['jobInfo'] = [position['pid'], position['rid']]
    return render_template('position_detail.html', position=position, 
                            ask="True", referrer_contact=referrer_contact)

@app.route('/dashboard_position_detail/<int:pid>', methods=['GET'])
def dashboard_position_detail(pid):
    ''' This method is for position detail page'''
    if not session['logged_in']:
        return redirect(url_for('logout')) 
    conn = dbi.connect()
    position = job_handler.retrieve_position(conn, pid)
    referrer_contact = job_handler.retrieve_referrer_contact(conn, position['rid'])
    session['jobInfo'] = [position['pid'], position['rid']]
    session_uid = session['uid']
    return render_template('position_detail.html', position=position, 
                            dashboard="True", uid = session_uid, referrer_contact=referrer_contact)

@app.route('/ask_for_refer/', methods=['GET', 'POST'])
def ask_for_refer():
    ''' This method is for when student want to ask for a referral '''
    if not session['logged_in']:
        return redirect(url_for('logout')) 
    conn = dbi.connect()
    session_uid = session['uid']
    pid = session['jobInfo'][0]
    rid = session['jobInfo'][1]
    if request.method == 'GET':
        return render_template('askForRefer.html', pid = pid)
    else:
        if refer_handler.check_duplicate_request(conn, rid, session_uid, pid):
            flash("You already submitted a request of referral for this position. You cannot submit twice.")
            return redirect(url_for('mainSearch'))
        else: 
            try: 
                whyCompany = request.form['whyCompany']
                whyPosition = request.form['whyPosition']
                refer_handler.ask_for_refer(conn, rid, session_uid, pid, whyCompany, whyPosition)
                flash("Successfully submit a request for an referral. Please go to your dashboard for status update.")
                session.pop('jobInfo')
                return redirect(url_for('mainSearch'))
            except Exception as err:
                flash("something went wrong", repr(err))
                session.pop('jobInfo')
                return redirect(url_for('position_detail', pid=pid))

@app.route('/jobs/', methods=['GET', 'POST'])
def jobs():
    '''This route is used for referrer submitting jobs that they can refer students'''
    if not session['logged_in']:
        return redirect(url_for('logout')) 
    conn = dbi.connect()
    if request.method == 'GET':
        return render_template('jobSubmit.html')
    else:
        rid = session.get('uid')
        company = request.form.get("company")
        pos_name = request.form.get("pos_name")
        referrer_name = job_handler.name(conn,rid)
        postionLocation = request.form.get("location")
        materialNeeded = request.form.get("materialNeeded")
        submitDeadline = request.form.get("submitDeadline")
        job_handler.storeJob(conn,rid,company,pos_name,referrer_name,postionLocation,
            materialNeeded,submitDeadline)
        session_uid = session['uid']
        return redirect(url_for('welcome_referrer',uid = session_uid))

@app.route('/student_detail/<int:sid>/<int:pid>', methods=['GET','POST'])
def student_detail(sid,pid):
    ''' This method is for student detail page '''
    if not session['logged_in']:
        return redirect(url_for('logout')) 
    conn = dbi.connect()
    session_uid = session['uid']
    if request.method == 'GET':
        # why Position, WhyCompany
        dic = job_handler.student_detail(conn, sid)
        return render_template('student_detail.html',dic=dic, uid = session_uid,pid=pid,sid= sid )
    else:
        status = request.form.get('action')
        rid = session_uid
        job_handler.change_status(conn,status,rid,sid,pid)
        return redirect(url_for('welcome_referrer', uid=session_uid))

#NOT IMPLEMENTED YET, SEE BETA VERSION
@app.route('/messageCenter/', methods=['GET'])
def messageCenter():
    '''Route for message Center, not implemented yet. DO NOT GRADE'''
    if not session['logged_in']:
        return redirect(url_for('logout'))
    conn = dbi.connect()
    announcements = message_center.retrieve_announcement(conn)
    print(announcements)
    if not announcements:
        return jsonify({'empty': True, 'emptymsg': "No Notifications"})
    return jsonify({'empty': False, 'message': announcements})

#NOT COMPLETELY FINISHED YET, SEE BETA VERSION
@app.route('/keywords/<keyword>/<search_by>', methods=['GET'])
def keywords(keyword, search_by):
    '''Route used for Ajax - autofill keywords when student search for positions to apply'''
    if not session['logged_in']:
        return redirect(url_for('logout'))
    conn = dbi.connect()
    if request.method == 'GET':
        if search_by == 'position':
            keywordLists = search_handler.get_matched_position_names(conn, keyword)
        #if the user select search by referrer
        elif search_by == 'referrer':
            keywordLists = search_handler.get_matched_referrer_names(conn, keyword)
        #if the user select search by company
        else:
            keywordLists = search_handler.get_matched_company_names(conn, keyword)
        return jsonify({'search_by': search_by, 'keywords': keywordLists})

@app.before_first_request
def startup():
    dbi.cache_cnf()
    dbi.use('referral_db')
    session['logged_in'] = False

if __name__ == '__main__':
    import os
    uid = os.getuid()
    app.debug = True
    app.run('0.0.0.0',uid)



====================== job_handler.py =====================

import cs304dbi as dbi

def name(conn,uid):
    '''Return name of user according to uid
    we guarantee that uid exist in table '''
    curs = dbi.dict_cursor(conn)
    sql = 'select name from user where uid = %s'
    curs.execute(sql,[uid])
    return curs.fetchone()['name']

def storeJob(conn,rid,company,pos_name,referrer_name,postionLocation,
            materialNeeded,submitDeadline):
    '''Store the Job in jobPosition table'''
    try: 
        curs = dbi.dict_cursor(conn)
        sql = '''INSERT INTO jobPosition (rid, company, positionName, 
        referrerName,postionLocation,materialNeeded,submitDeadline) VALUES 
        (%s,%s,%s,%s,%s,%s,%s)'''
        curs.execute(sql,[rid,company,pos_name,referrer_name,postionLocation,
            materialNeeded,submitDeadline])
        conn.commit()
    except Exception as err:
        print('something went wrong', repr(err))
    
def retrieve_position(conn, pid):
    ''' Retrieve one position detail using the given pid '''
    curs = dbi.dict_cursor(conn)
    sql = 'select * from jobPosition where pid = %s'
    curs.execute(sql,[pid])
    return curs.fetchone()

def retrieve_referrer_contact(conn, rid):
    ''' Retrieve referrer contact information using the given rid '''
    curs = dbi.dict_cursor(conn)
    sql = '''select emailPrefer, phoneNumber, linkedin, otherContact 
        from referrer where rid = %s'''
    curs.execute(sql,[rid])
    return curs.fetchone()

def retrieve_pid(conn, sid):
    ''' retrieve position id according to the sid given '''
    curs = dbi.dict_cursor(conn)
    sql = 'select pid from refer where sid = %s'
    curs.execute(sql,[sid])
    return curs.fetchall()

def retrieve_applied_positions(conn, sid):
    ''' Retrieve list of position details that this 
        current student applied'''
    curs = dbi.dict_cursor(conn)
    sql = '''select * from jobPosition inner join refer
            using (pid)
            where sid = %s'''
    curs.execute(sql, [sid])
    return curs.fetchall()

def retrieve_applied_student(conn, rid):
    ''' Retrieve list of students and their info who applied 
        to the positions posted by this specific referrer'''
    curs = dbi.dict_cursor(conn)
    sql = '''select refer.pid, sid, positionName, referStatus, name as studentName 
            from jobPosition inner join refer using(pid) 
            inner join student using(sid)
            where refer.rid = %s'''
    curs.execute(sql, [rid])
    return curs.fetchall()

def student_detail(conn,sid):
    ''' Retrieve Why Position and Why Company and student information given sid'''
    curs = dbi.dict_cursor(conn)
    sql = '''select name, major, minor, file, description,
            whyCompany, whyPosition
            from refer inner join student using (sid) 
            where sid = %s;'''
    curs.execute(sql, [sid])
    return curs.fetchone()

def change_status(conn,status,rid,sid,pid):
    '''change the refer status of in refer table according to what
    the referrer submitted in the form '''
    # the method is not working properly 
    curs = dbi.dict_cursor(conn)
    sql = '''update refer set referStatus = %s where rid = %s and sid = %s and pid = %s'''
    # update refer set referStatus = "waiting" where rid = 2 and sid = 1 and pid = 1;
    curs.execute(sql,[status,rid,sid,pid])
    conn.commit()
====================== login_handler.py =====================

import cs304dbi as dbi

def getPassword(conn, email):
    '''Returns the password and user_type as tuple'''
    curs = dbi.dict_cursor(conn)
    sql = '''select password, type
            from user 
            where email = %s'''
    curs.execute(sql, [email])
    result = curs.fetchone()
    if not result:
        return ("","")
    return (result['password'], result['type'])


====================== message_center.py =====================

import cs304dbi as dbi

def retrieve_announcement(conn):
    ''' Retrieve all announcements from the database'''
    curs = dbi.dict_cursor(conn)
    sql = 'select announceid, announcement from announce' 
    curs.execute(sql)
    return curs.fetchall()
====================== refer_handler.py =====================

import cs304dbi as dbi

def ask_for_refer(conn,rid, sid, pid, whyCompany, whyPosition):
    ''' Insert the information into refer database '''
    curs = dbi.dict_cursor(conn)
    sql = '''INSERT INTO refer 
    (rid, sid, pid, whyCompany,whyPosition, referStatus) 
    VALUES (%s,%s,%s,%s,%s, "waiting")'''
    curs.execute(sql,[rid,sid,pid,whyCompany,whyPosition])
    conn.commit()
    
def check_duplicate_request(conn, rid, sid, pid):
    ''' Return true if the student already asked for a referral of specific postion. 
        Otherwise, return false '''
    curs = dbi.dict_cursor(conn)
    sql = '''select * from refer where rid = %s and sid = %s and pid = %s '''
    curs.execute(sql,[rid,sid,pid])
    return curs.fetchone() != None
====================== search_handler.py =====================

import cs304dbi as dbi

def searchByPosition(conn, query):
    '''Returns a list of positions that match the position keywords'''
    curs = dbi.dict_cursor(conn)
    list_of_keywords = percentageKeyword(query.split())
    sql = getSQL(len(list_of_keywords), "positionName")
    curs.execute(sql, list_of_keywords)
    return curs.fetchall()

def percentageKeyword(list_of_keywords):
    ''' Generate list of keywords with % sign
    ie. if the list_of_keywords is ['a', 'b'], the result is 
    ['%a%', '%b%'] '''
    for i in range(len(list_of_keywords)):
        list_of_keywords[i] = '%' + list_of_keywords[i] + '%'
    return list_of_keywords

def searchByReferrer(conn, query):
    '''Returns a list of positions that match the referrer keywords'''
    curs = dbi.dict_cursor(conn)
    list_of_keywords = percentageKeyword(query.split())
    sql = getSQL(len(list_of_keywords), "referrerName")
    curs.execute(sql, list_of_keywords)
    return curs.fetchall()

def searchByCompany(conn, query):
    '''Returns a list of positions that match the company keywords'''
    curs = dbi.dict_cursor(conn)
    list_of_keywords = percentageKeyword(query.split())
    sql = getSQL(len(list_of_keywords), "company")
    curs.execute(sql, list_of_keywords)
    return curs.fetchall()

def getSQL (length, search_by):
    '''Generate sql string in order to query from jobPosition
    when the input is a list of values.
    ie. if search_by is 'company' and the length is 2, 
    the final returned sql is
    'select * form jobPosition where (company LIKE %s and company LIKE %s)'''
    sql = 'select * from jobPosition where '
    sql += (search_by + ' LIKE %s and ') * (length-1)
    sql += search_by + ' LIKE %s'
    return sql

def get_matched_position_names(conn, keyword):
    ''' Get the name of the positions as a list of 
        dictionaries that contains the given keyword. 
        ie. given keyword is "sof". This method will 
        select all the distinct position names that contain
        'sof'.'''
    curs = dbi.dict_cursor(conn)
    sql = '''select distinct trim(positionName) as positionName
        from jobPosition where positionName LIKE %s'''
    curs.execute(sql, ['%' + keyword + '%'])    
    return curs.fetchall()

def get_matched_company_names(conn, keyword):
    ''' Get the name of the companies as a list of 
        dictionaries that contains the given keyword. 
        ie. given keyword is "mic". This method will 
        select all the distinct company names that contain
        'mic'.'''
    curs = dbi.dict_cursor(conn)
    sql = '''select distinct trim(company) as company
        from jobPosition where company LIKE %s'''
    curs.execute(sql, ['%' + keyword + '%'])    
    return curs.fetchall()

def get_matched_referrer_names(conn, keyword):
    ''' Get the name of referrers as a list of 
        dictionaries that contains the given keyword. 
        ie. given keyword is "sar". This method will 
        select all the distinct referrers names that contain
        'sar'.'''
    curs = dbi.dict_cursor(conn)
    sql = '''select distinct trim(referrerName) as referrerName
        from jobPosition where referrerName LIKE %s'''
    curs.execute(sql, ['%' + keyword + '%'])    
    return curs.fetchall()

====================== update.py =====================

import cs304dbi as dbi

def retrieve_student_profile(conn, uid):
    ''' Retrieve student profile using uid '''
    curs = dbi.dict_cursor(conn)
    sql = ''' select major, minor, file, preferredLocation, description 
                from student where sid = %s '''
    curs.execute(sql,[uid])
    return curs.fetchone()

def retrieve_referrer_profile(conn, uid):
    ''' Retrieve referrer profile using uid '''
    curs = dbi.dict_cursor(conn)
    sql = ''' select company, position, emailPrefer, otherContact, linkedin, phoneNumber
                from referrer where rid = %s '''
    curs.execute(sql,[uid])
    return curs.fetchone()

def update_student_profile(conn,sid,major,minor,file,loc,des):
    ''' Update student profile using sid '''
    curs = dbi.dict_cursor(conn)
    sql = ''' update student set 
            major=%s, minor=%s, file=%s, preferredLocation=%s, description=%s 
            where sid=%s '''
    curs.execute(sql,[major,minor,file,loc,des,sid])
    conn.commit()

def update_referrer_profile(conn,rid,company,position,emailPrefer,otherContact,linkedin,phoneNumber):
    ''' Update Referrer profile using rid '''
    curs = dbi.dict_cursor(conn)
    sql = ''' update referrer set 
            company=%s, position=%s, emailPrefer=%s, otherContact=%s, 
            linkedin=%s, phoneNumber=%s
            where rid=%s'''
    curs.execute(sql,[company,position,emailPrefer,otherContact,linkedin,phoneNumber,rid])
    conn.commit()
====================== user_reg.py =====================

import cs304dbi as dbi
import re

# credit to: https://www.mygreatlearning.com/blog/regular-expression-in-python/
regex = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'

ALLOWED_EXTENSIONS = {'txt', 'pdf', 'doc'}

def insert_user_db(conn,name,email,password,year,account_type):
    '''Insert a new user into database, the password here is after salt'''
    try: 
        curs = dbi.dict_cursor(conn)
        sql = '''INSERT INTO user (name, email, password,
        classYear,type) VALUES (%s,%s,%s,%s,%s)'''
        curs.execute(sql,[name,email,password,year,account_type])
        conn.commit()
    except Exception as err:
        print('something went wrong', repr(err))
        
def insert_student_profile (conn,sid,name,major,minor,
    file,preferredLocation,description):
    '''Insert a new student into database'''
    try: 
        curs = dbi.dict_cursor(conn)
        sql = '''INSERT INTO student (sid, name, major, minor, file,
        preferredLocation,description) VALUES (%s,%s,%s,%s,%s,%s,%s)'''   
        curs.execute(sql,[sid,name,major,minor,file,preferredLocation,description])
        conn.commit()
    except Exception as err:
        print('something went wrong', repr(err))

def insert_referrer_profile(conn,rid,name,company,position,
    emailPrefer,otherContact,linkedin,phoneNumber):
    '''Insert a new referrer into database'''
    try: 
        curs = dbi.dict_cursor(conn)
        sql = '''INSERT INTO referrer (rid,name,company,position,emailPrefer,
            otherContact,linkedin,phoneNumber) VALUES (%s,%s,%s,%s,%s,%s,%s,%s)'''
        curs.execute(sql,[rid,name,company,position,
        emailPrefer,otherContact,linkedin,phoneNumber])
        conn.commit()
    except Exception as err:
        print('something went wrong', repr(err))

def insert_admin_profile(conn,aid):
    ''' Retreive admin from admin table with provided aid '''
    curs = dbi.dict_cursor(conn)
    sql = '''INSERT INTO admin (aid, name, major, minor,file,
    preferredLocation,description) VALUES (%s,%s,%s,%s,%s,%s,%s)'''    
    curs.execute(sql,[sid,name,major,minor,file,preferredLocation,description])
    conn.commit()

def retrieve_user(conn, uid):
    ''' Retrieve user name from user table with provided uid '''
    curs = dbi.dict_cursor(conn)
    sql = '''select name from user where uid = %s'''
    curs.execute(sql,[uid])
    return curs.fetchone()["name"]

def allowed_file(filename):
    ''' Determine whether the file is allowed '''
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def retrieve_uid(conn, email):
    ''' Retrieve uid from user table with provided email, if not exist, return None '''
    curs = dbi.dict_cursor(conn)
    sql = '''select uid from user where email = %s'''
    curs.execute(sql,[email])
    dic = curs.fetchone()
    if dic != None:
        return dic["uid"]
    else:
        return dic

def check_email(conn,email):
    '''Check if email already in db, return true if it exists'''
    curs = dbi.dict_cursor(conn)
    sql = '''select email from user where email = %s'''
    curs.execute(sql,[email])
    return curs.fetchone() != None
    
def check_valid_email(conn, email):
    ''' Check if email is in valid format '''
    if(re.fullmatch(regex, email)):
        return True
    else:
        print("Invalid Email")
        return False
====================== *.sql =====================

====================== templates/askForRefer.html =====================
{% extends "detail_template.html" %}
{% block content %}

<form id="student-ask-for-refer-form" method="POST" action="{{url_for('ask_for_refer')}}">
    <table class="referral-info-table">
        <tr>
            <td><label for="whyCompany">Why Company</label></td>
            <td><textarea class="referInput" id="whyCompany" name="whyCompany" cols="40" rows="5" maxlength=500></textarea></td>
        </tr>
        <tr>
            <td><label for="whyPosition">Why Position</label></td>
            <td><textarea class="referInput" id="whyPosition" name="whyPosition" cols="40" rows="5" maxlength=500></textarea></td>
        </tr>
    </table>
    <input class="detail_btn" type="submit" value="Submit">
    <a href="{{ url_for('position_detail', pid=pid) }}" class="detail_btn">Back</a>
</form>

{% endblock %}
====================== templates/baseHeader.html =====================
<!doctype html>
<html lang='en'>

<head>
    <meta charset='utf-8'>
    <meta name=author content="Annie Liu and Michelle Zhao">
    <title>Base Header</title>
    <link rel='stylesheet' href="{{ url_for('static',filename = 'style.css') }}">
</head>

<body>
    <div class="base_header">
        <a href="{{ url_for('dashboard') }}" class="header_btn">Dashboard</a>
        <a href="{{ url_for('logout') }}" class="header_btn">Logout</a>
        {% block header %}
        {% endblock %}
    </div>

    <div id="main">
        {% block main %}
        {% endblock %}
    </div>

    <script src="{{ url_for('static',filename = 'messageCenter.js') }}"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
</body>
====================== templates/baseRegForm.html =====================
<!doctype html>
<html lang='en'>
<head>
    <meta charset='utf-8'>
    <meta name=author content="Annie Liu">
    <title>Base Registration Page</title>
    <link rel='stylesheet' href="{{ url_for('static',filename = 'style.css') }}">
</head>

<body>

    {% if msg %}
    <div id="message">
        <p class = "error">{{msg}}</p>
    </div>
    {% endif %}

    <div class="reg-container">
        <p class="login-title">Registration</p>
        <form id="reg-form" method="POST" action= "{{url_for('base_registration')}}">
            <table class="reg-table">
                <tr>
                    <td><label for="name">Name<span class="required">*</span></label></td>
                    <td><input class="regInput" type="text" id="name" name= "name" placeholder="Name" required></td>
                </tr>
                <tr>
                    <td><label for="email">Email<span class="required">*</span></label></td>
                    <td><input class="regInput" id="email" name="email" placeholder="Email" required></td>
                </tr>
                <tr>
                    <td><label for="password">Password<span class="required">*</span></label></td>
                    <td><input class="regInput" id="password" name="password" placeholder="Password" required></td>
                </tr>
                <tr>
                    <td><label for="classyear">Class year<span class="required">*</span></label></td>
                    <td><input class="regInput" id="classyear" type="number" name="classyear" required></td>
                </tr>
                <tr>
                    <td><label for="accountType">Account type<span class="required">*</span></label></td>
                    <td><select class="regInput" id="accountType" name="accountType" required>
                        <option value="">select</option>
                        <option value="Student">Student Account</option>
                        <option value="Referrer">Referrer Account</option>
                        <option value="Admin">Admin</option>
                    </select></td>
                </tr>
            </table>
            <input class="next" type="submit" value="Next">
        </form>
    </div>
</body>
</html>
====================== templates/detail_template.html =====================
<!doctype html>
<html lang='en'>
<head>
    <meta charset='utf-8'>
    <meta name=author content="Annie Liu">
    <title>Base Detail Page</title>
    <link rel='stylesheet' href="{{ url_for('static',filename = 'style.css') }}">
</head>

<body>
    <div class="detail-container">
        {% block content %}
        {% endblock %}
    </div>
</body>
</html>
====================== templates/icon =====================

====================== templates/jobSubmit.html =====================
{% extends "baseHeader.html" %}
{% block main %}

<div class="reg-container">
    <p class="login-title">Job Submission</p>
    <form id="reg-form" method="POST" action= "{{url_for('jobs')}}">
        <table class="reg-table">
            <tr>
                <td><label for="company">Company<span class="required">*</span></label></td>
                <td><input class="regInput" type="text" id="company" name= "company" placeholder="Company Name" required></td>
            </tr>
            <tr>
                <td><label for="pos_name">Position Name<span class="required">*</span></label></td>
                <td><input class="regInput" id="pos_name" name="pos_name" placeholder="place enter one position name" required></td>
            </tr>
            <tr>
                <td><label for="location">Position Location<span class="required">*</span></label></td>
                <td><input class="regInput" id="location" name="location" placeholder="Enter Multiple Location in the form of City, State; City, State" required></td>
            </tr>
            <tr>
                <td><label for="materialNeeded">Materials Needed<span class="required">*</span></label></td>
                <td><input class="regInput" id="materialNeeded" name="materialNeeded" placeholder="Resume" required></td>
            </tr>
            <tr>
                <td><label for="submitDeadline">Submission Deadline<span class="required">*</span></label></td>
                    <td><input class="regInput" id="submitDeadline" type="date" name="submitDeadline" required></td>
            </tr>
        </table>
        <input class="next" type="submit" value="Submit">
    </form>
</div>

{% endblock %}
====================== templates/login.html =====================
<!doctype html>
<html lang='en'>

<head>
    <meta charset='utf-8'>
    <meta name=author content="Annie Liu">
    <title>Main Sign In Page</title>
    <link rel='stylesheet' href="{{ url_for('static',filename = 'style.css') }}">
</head>

<body>
    {% with message = get_flashed_messages() %}
    {% if message %}
    <div id="message">
        <p class = "error">{{message}}</p>
    </div>
    {% endif %}
    {% endwith %}

    <div class="login-container">
        <p class="login-title">Sign in</p>
        <form id="login-form" method="POST" action = "{{url_for('login')}}">
            <input class="loginInfo" aria-label="Email" type="text" name="email" placeholder="Email" required>
            <input class="loginInfo" aria-label="Passowrd" type="text" name="password" placeholder="Password" required>

            <input class="signIn" name="submit" type="submit" value="Sign In">
        </form>
        <a href="{{url_for('base_registration')}}" class="signUp">Sign Up</a>
    </div>
    <!-- <a href="#">Forgot Username / Password?</a> -->
</body>

</html>
====================== templates/mainSearch.html =====================
{% extends "baseHeader.html" %}
{% block main %}

<table class="search_table">
    <tr>
        <td>
            {% with message = get_flashed_messages() %}
            {% if message %}
            <div id="message">
                <p class="error">{{message}}</p>
            </div>
            {% endif %}
            {% endwith %}
        </td>
    </tr>
    <tr>
        <td>
            <div class="searchFormContainer">
                <h1 class="searchTitle">Referral Database</h1>
                <p class="searchSubtitle">Are you looking for a referral? Here is the right place for you!</p>
                <form class="search" method="POST" action="{{url_for('mainSearch')}}">
                    <fieldset class="search_by_button_grp" id="radio_button_group">
                        <input type="radio" id="position_name" name="search_by" value="position" checked>
                        <label for="position_name">Position Name</label>
                        <input type="radio" id="referrer" name="search_by" value="referrer">
                        <label for="referrer">Referrer</label>
                        <input type="radio" id="company" name="search_by" value="company">
                        <label for="company">Company</label>
                    </fieldset>
                    <input class="search_input" aria-label="Search" type="text" name="query"
                        placeholder="Search for job position" id="search_input" required>
                    <input type="submit" class="search_btn" value="Search">
                    <div id="result">
                    </div>
                </form>
            </div>
        </td>
    </tr>
</table>

<div id="content">
    {% block content %}
    {% endblock %}
</div>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script src="{{ url_for('static',filename = 'search.js') }}"></script>

{% endblock %}
====================== templates/position_detail.html =====================
{% extends "detail_template.html" %}
{% block content %}

{% with message = get_flashed_messages() %}
{% if message %}
<div id="message">
    <p class="success">{{message}}</p>
</div>
{% endif %}
{% endwith %}

<div>
    <h1 class=position_title>{{ position.positionName }}</h1>
    <table class="position-table">
        <tr>
            <td class="detaillabel"><label class="positionInfo">Company</label></td>
            <td class="detailInfo">
                <p>{{ position.company }}</p>
            </td>
        </tr>
        <tr>
            <td class="detaillabel"><label class="positionInfo">Location</label></td>
            <td class="detailInfo">
                <p>{{ position.postionLocation }}</p>
            </td>
        </tr>
        <tr>
            <td class="detaillabel"><label class="positionInfo">Deadline</label></td>
            <td class="detailInfo">
                <p>{{ position.submitDeadline }}</p>
            </td>
        </tr>
        <tr>
            <td class="detaillabel"><label class="referrerName">Referrer Name</label></td>
            <td class="detailInfo">
                <p>{{ position.postionLocation }}</p>
            </td>
        </tr>
        <tr>
            <td class="detaillabel"><label class="positionInfo">Material Needed</label></td>
            <td class="detailInfo">
                <p> {{ position.materialNeeded }}</p>
            </td>
        </tr>
        <tr>
            <td class="detaillabel"><label class="positionInfo">Contact Email</label></td>
            <td class="detailInfo">
                <p>{{ referrer_contact.emailPrefer }}</p>
            </td>
        </tr>
        <tr>
            <td class="detaillabel"><label class="positionInfo">Contact Phone Number</label></td>
            <td class="detailInfo">
                <p>{{ referrer_contact.phoneNumber }}</p>
            </td>
        </tr>
        <tr>
            <td class="detaillabel"><label class="positionInfo">LinkedIn</label></td>
            <td class="detailInfo">
                <p>{{ referrer_contact.linkedin }}</p>
            </td>
        </tr>
        <tr>
            <td class="detaillabel"><label class="positionInfo">Other Contact</label></td>
            <td class="detailInfo">
                <p>{{ referrer_contact.otherContact }}</p>
            </td>
        </tr>
    </table>

    {% if ask %}
    <a href="{{ url_for('mainSearch') }}" class="detail_btn">Back</a>
    <a href="{{ url_for('ask_for_refer') }}" class="detail_btn">Ask For Refer</a>
    {% endif %}

    {% if dashboard %}
    <a href="{{ url_for('welcome_student', uid = uid) }}" class="detail_btn">Back</a>
    {% endif %}
</div>

{% endblock %}
====================== templates/profile_referrer.html =====================
{% extends "profile_template.html" %}
{% block content %}

{% with message = get_flashed_messages() %}
{% if message %}
<div id="message">
    <p class="error">{{message}}</p>
</div>
{% endif %}
{% endwith %}

{% if is_update %}
<form id="referrer-profile-form" method="POST" action="{{url_for('update_profile', uid = uid )}}">
    {% endif %}

    {% if not is_update%}
    <form id="referrer-profile-form" method="POST" action="{{url_for('profile_referrer', uid = uid )}}">
        {% endif %}
        <table class="reg-table">
            <tr>
                <td><label for="company">Company<span class="required">*</span></label></td>
                <td><input class="regInput" id="company" name="company" placeholder="Enter Company"
                        value="{{dic.company}}" required></td>
            </tr>
            <tr>
                <td><label for="position">Position<span class="required">*</span></label></td>
                <td><input class="regInput" id="position" name="position" placeholder="Enter your Job Position"
                        value="{{dic.position}}" required>
                </td>
            </tr>

            <!-- Contact email is the email that you wish to use for Wellesley College Students to contact you, which can be different with your registration email. -->
            <tr>
                <td><label for="contactEmail">Contact Email<span class="required">*</span></label>
                    <a href="#" class="tooltip">
                        ?
                        <span class="tooltiptext">Contact email is the email that you wish to use for Wellesley College
                            Students to contact you, which can be different with your registration email.</span>
                    </a>
                </td>
                <td><input class="regInput" id="contactEmail" name="contactEmail" placeholder="Enter your email"
                        value="{{dic.emailPrefer}}" required>
                </td>
            </tr>
            <tr>
                <td><label for="linkedIn">LinkedIn</label></td>
                <td><input class="regInput" id="linkedIn" name="linkedIn" placeholder="Enter your linkedin profile link"
                        value="{{dic.linkedin}}">
                </td>
            </tr>
            <tr>
                <td><label for="phnum">Phone Number</label></td>
                <td><input class="regInput" id="phnum" name="phnum" type="number" placeholder="Enter Phone number"
                        value="{{dic.phoneNumber}}"></td>
            </tr>
            <tr>
                <td><label for="otherContact">Other Contact Method</label></td>
                <td><input class="regInput" id="otherContact" name="otherContact"
                        placeholder="Enter other contact method" value="{{dic.otherContact}}">
                </td>
            </tr>
        </table>
        <input class="save_profile" type="submit" value="Save Profile">
    </form>

    {% endblock %}
====================== templates/profile_student.html =====================
{% extends "profile_template.html" %}
{% block content %}

{% with message = get_flashed_messages() %}
{% if message %}
<div id="message">
    <p class="error">{{message}}</p>
</div>
{% endif %}
{% endwith %}

{% if is_update %}
<form id="student-profile-form" method="POST" action = "{{url_for('update_profile',uid = uid)}}" enctype="multipart/form-data">
{% endif %}
{% if not is_update%}
<form id="student-profile-form" method="POST" action = "{{url_for('profile_student',uid = uid)}}" enctype="multipart/form-data">
{% endif %}
    <table class="student-table">
        <tr>
            <td><label for="major">Major<span class="required">*</span></label></td>
            <td><input class="regInput" id="major" name="major" placeholder="Enter Your Major" value="{{dic.major}}"
                    required></td>
        </tr>
        <tr>
            <td><label for="minor">Minor</label></td>
            <td><input class="regInput" id="minor" name="minor" placeholder="Enter Your Minor" value="{{dic.minor}}"></td>
        </tr>
        <tr>
            <td><label for="prefLoc">Preferred Location</label></td>
            <td><input class="regInput" id="prefLoc" name="prefLoc" placeholder="Enter Your Preferrer Location"
                    value="{{dic.preferredLocation}}"></td>
        </tr>
        <tr>
            <td><label for="description">Description</label></td>
            <td><input class="regInput" id="description" name="description"
                    placeholder="Enter a Description of yourself" value="{{dic.description}}"></td>
        </tr>
        <tr>
            <td><label for="resume">Resume<span class="required">*</span></label></td>
            <td><input type="file" class="fileUpload" id="resume" name="resume" required></td>
        </tr>
    </table>
    <input class="save_profile" type="submit" value="Save Profile">
</form>

{% endblock %}
====================== templates/profile_template.html =====================
<!doctype html>
<html lang='en'>
<head>
    <meta charset='utf-8'>
    <meta name=author content="Michelle Zhao">
    <title>Profile Page Template</title>
    <link rel='stylesheet' href="{{ url_for('static',filename = 'style.css') }}">
</head>

<body>
    <div class="profile-container">
        <h1 class = profile_title>Profile Settings</h1>
        {% block content %}
        {% endblock %}
    </div>
</body>
</html>
====================== templates/search.html =====================
{% extends "mainSearch.html" %}
{% block content %}

<div class="queryResult">
    {% if results %}
        <table class="search_result">
            <tr>
                <th>Position Name</th>
                <th>Company</th>
                <th>Referrer</th>
                <th>View Detail</th>
            </tr>
            
            {% for result in results %}
            <tr>
                <td>{{result.positionName}}</td>
                <td>{{result.company}}</td>
                <td>{{result.referrerName}}</td>
                <td><a href="{{ url_for('position_detail', pid = result.pid) }}" class="detailButton">View Detail</a></td>
            </tr>
            {% endfor %}
        </table>
    {% endif %}

    {% if msg %}
    <div id="message">
        <h1 class="error">{{ desc }}</h1>
        <p class="error">{{msg}}</p>
    </div>
    {% endif %}
</div>

{% endblock %}

====================== templates/student_detail.html =====================
{% extends "detail_template.html" %}
{% block content %}

<div>
    <h1 class=position_title>{{ dic.name }}</h1>
    <table class="position-table">
        <tr>
            <td class="detaillabel"><label class="positionInfo">Major</label></td>
            <td class="detailInfo">
                <p>{{ dic.major }}</p>
            </td>
        </tr>
        <tr>
            <td class="detaillabel"><label class="positionInfo">Minor</label></td>
            <td class="detailInfo">
                <p>{{ dic.minor }}</p>
            </td>
        </tr>
        <tr>
            <td class="detaillabel"><label class="positionInfo">Description</label></td>
            <td class="detailInfo">
                <p>{{ dic.description }}</p>
            </td>
        </tr>
        <tr>
            <td class="detaillabel"><label class="positionInfo">Why Position</label></td>
            <td class="detailInfo">
                <p>{{ dic.whyPosition }}</p>
            </td>
        </tr>
        <tr>
            <td class="detaillabel"><label class="positionInfo">Why Company</label></td>
            <td class="detailInfo">
                <p>{{ dic.whyCompany }}</p>
            </td>
        </tr>
    </table>

    <form class="status-form" id="change-status-form" method="POST" action="{{url_for('student_detail', sid = sid, pid = pid )}}">
        <label class="status-form-label" for="action">Select your action:</label>
        <select class="status-form-action" id="action" name="action" required>
            <option value="">Please Select</option>
            <option value="accept">Accept</option>
            <option value="reject">Decline</option>
            <option value="sent">Sent</option>
        </select>
        <input class="status" name="submit" type="submit" value="Submit">
    </form>

    <a href="{{ url_for('welcome_referrer', uid = uid) }}" class="detail_btn">Back</a>

</div>

{% endblock %}
====================== templates/welcome_admin.html =====================
<!-- to be implemented  -->
{% extends "welcome.html" %}
{% block welcome_content %}
<p class="login-title">Announcement Submission</p>
        <form id="announcement-form" method="" action="{{url_for('profile_admin')}}">
            <p><label>Announcement <input type="text" placeholder="Enter your announcement there"></label><br>
            <input class="next" type="submit" value="announcement">
        </form>

{% endblock %}

====================== templates/welcome.html =====================
{% extends "baseHeader.html" %}
{% block main %}

<div id="welcome_content">
    {% block welcome_content %}
    {% endblock %}
</div>

{% endblock %}
====================== templates/welcome_referrer.html =====================
{% extends "welcome.html" %}

{% block header %}
<a href="{{ url_for('update_profile') }}" class="header_btn">Update Profile</a>
<a href="{{ url_for('jobs') }}" class="header_btn">New Position</a>
<button id="message_center" class="dropdown_btn">Message Center</button>
<div id="message_center_div" class="dropdown_content">
</div>
{% endblock %}

{% block welcome_content %}
<div class="referrer_dashboard_container">
  <h1 class=welcomeBack>Welcome, Referrer!</h1>
  <h2 class="dashboard">Your DashBoard</h2>

  {% if msg %}
  <div id="message">
    <h1 class="error">{{ msg }}</h1>
  </div>
  {% endif %}

  {% if results %}
  <table class="referrer_dashboard_table">
    <tr>
      <th>Student Name</th>
      <th>Position Applied</th>
      <th>Your Response</th>
      <th>Detail</th>
    </tr>
    {% for result in results %}
    <tr>
      <td>{{result.studentName}}</td>
      <td>{{result.positionName}}</td>
      <td>{{result.referStatus}}</td>
      <td><a href="{{ url_for('student_detail', sid = result.sid, pid = result.pid) }}" class="detailButton">View
          Detail</a></td>
      <!-- need a pid -->
    </tr>
    {% endfor %}
  </table>
  {% endif %}
</div>

{% endblock %}
====================== templates/welcome_student.html =====================
{% extends "welcome.html" %}

{% block header %}
<a href="{{url_for('update_profile') }}" class="header_btn">Update Profile</a>
<a href="{{ url_for('mainSearch')}}" class="header_btn">Search</a>
<button id="message_center" class="dropdown_btn">Message Center</button>
<div id="message_center_div" class="dropdown_content">
</div>
{% endblock %}

{% block welcome_content %}
<div class="student_dashboard_container">
  <h1 class="welcomeBack">Welcome, Student!</h1>
  <h2 class="dashboard">Your DashBoard</h2>

  {% if msg %}
  <div id="message">
    <h1 class="error">{{ msg }}</h1>
  </div>
  {% endif %}

  {% if positions %}
  <table class="student_dashboard_table">
    <tr>
      <th>Referrer Name</th>
      <th>Company</th>
      <th>Position Applied</th>
      <th>Status</th>
      <th>Detail</th>
    </tr>
    {% for position in positions %}
    <tr>
      <td>{{ position.referrerName }}</td>
      <td>{{ position.company }}</td>
      <td>{{ position.positionName }}</td>
      <td>{{ position.referStatus }}</td>
      <td><a href="{{ url_for('dashboard_position_detail', pid = position.pid) }}" class="detailButton">View Detail</a>
      </td>
    </tr>
    {% endfor %}
  </table>
  {% endif %}
</div>

{% endblock %}
====================== static/messageCenter.js =====================

// function called when user clicked on Message Center Button
$(document).ready(function() {
    $("#message_center").click(function(){
        $.getJSON("/messageCenter",
        function (data) {
            // Create a DOM
            let appendlist;
            appendlist = $('<ul>', {'class': 'message_contents'});
            // if there is no notifications in the database
            if (data.empty) {
                console.log(data.emptymsg);
                appendlist.append($('<li>', {'class': 'error'}).text(data.emptymsg + " "));
            // if there exits notifications in the database
            } else {
                var list = data['message'];
                console.log(list)
                $.each(list, function (i, value) {
                    appendlist.append($('<li>', {'class': 'message_content'}).text(value.announcement));
                })
            }
            // show the message_center_div and display the DOM in html
            $('#message_center_div').show();
            $('#message_contents').html(appendlist);
        }
    );
    }); 
});

// hide message_center_div when user click outside of the div
$(document).mouseup(function(e) {
    var container = $('#message_center_div');
    if (!container.is(e.target) && container.has(e.target).length === 0) 
    {
        container.hide();
    }
});
====================== static/search.js =====================
var searchRequest = null;
var search_by = 'position';

$('#radio_button_group input:radio').on('change', function () {
    search_by = $(this).val();
});

$(function () {
    var minlength = 3;
    // when user type in the input box
    $("#search_input").keyup(function () {
        value = $(this).val();
        console.log(search_by);
        // if user types 3 or more characters
        if (value.length >= minlength) {
            // show the div and get json object from python
            $('#result').show();
            $.get('/keywords/' + value + '/' + search_by,
                function (data) {
                    keywords = data['keywords'];
                    search_by = data['search_by'];
                    let myData;
                    myData = $('<table>', { 'class': 'result_matches' });
                    myData.css({
                        'text-align': 'left',
                        'border-collapse': 'separate',
                        'border-spacing': '10px 8px',
                        'width': '610px',
                        'border-radius': '0.5rem',
                        'background': 'rgb(217, 158, 249)'
                    });
                    // If the user is searching by position
                    // iterate through keywords and get the matched positionNames
                    if (search_by == 'position') {
                        $.each(keywords, function (i, value) {
                            myData.append($('<tr>',
                                {
                                    'class': 'result_contents',
                                    'onclick': 'setValue(\"' + value.positionName + '\")'
                                }).text(value.positionName + " "));
                        });
                    // If the user is searching by referrer
                    // iterate through keywords and get the matched referrer names
                    } else if (search_by == 'referrer') {
                        $.each(keywords, function (i, value) {
                            myData.append($('<tr>',
                                {
                                    'class': 'result_contents',
                                    'onclick': 'setValue(\"' + value.referrerName + '\")'
                                }).text(value.referrerName + " "));
                        });
                    // If the user is searching by company
                    // iterate through keywords and get the matched company names
                    } else {
                        $.each(keywords, function (i, value) {
                            myData.append($('<tr>',
                                {
                                    'class': 'result_contents',
                                    'onclick': 'setValue(\"' + value.company + '\")'
                                }).text(value.company + " "));
                        });
                    }
                    $("#result").html(myData);
                });
        } else {
            $('#result').hide();
        }
    });
});

// when user click on the keyword
// update the value in the search box (the value will be autofilled in the search bar)
function setValue(value) {
    $("#search_input").val(value);
}
====================== static/style.css =====================
body {
  font-family: 'Open Sans', sans-serif;
  background:#F3EBF6;
  margin: 0 auto 0 auto;  
  width: 100%; 
  text-align: center;
  font-size: 15px;
}

.base_header {
  margin-top: 20px;
  text-align: right;
  padding-right: 20px;
}

.header_btn, .signUp, .dropdown_btn, .detail_btn {
  cursor: pointer;
  border-radius: 5em;
  color: #fff;
  background: linear-gradient(to right, #9C27B0, #E040FB);
  text-decoration: none;
}

.header_btn, .dropdown_btn {
  padding: 10px 15px;
  font-size: 15px;
}

.dropdown_btn{
  margin-top: 0px;
}

.detail_btn {
  padding: 20px 35px;
  margin: 10px;
  font-size: 18px;
}

.signUp {
  font-size: 15px;
  padding: 10px 20px;
}

.login-title, .profile_title{
  padding-top: 60px;
  color: #8C55AA;
  font-weight: bold;
  font-size: 25px;
  padding-bottom: 20px;
}

.position_title {
  padding-top: 60px;
  color: #8C55AA;
  font-weight: bold;
  font-size: 40px;
  text-align: left;
  padding-left: 100px;
}

.login-container, .reg-container, .profile-container, .refer-container, .change-container{
  background-color: #FFFFFF;
  margin: 8em auto;
  border-radius: 1.5em;
  box-shadow: 0px 11px 35px 2px rgba(0, 0, 0, 0.14);
}

.login-container {
  width: 400px;
  height: 400px;
}

.reg-container, .refer-container {
  width: 600px;
  height: 600px;
}

.profile-container {
  width: 600px;
  height: 650px;
}

.detail-container {
  background-color: #FFFFFF;
  margin: 4em auto;
  border-radius: 1.5em;
  box-shadow: 0px 11px 35px 2px rgba(0, 0, 0, 0.14);
  width: 90%;
  height: 1000px;
}

.loginInfo, .regInput, .referInput{
  width: 80%;
  color: rgb(38, 50, 56);
  font-weight: 700;
  letter-spacing: 1px;
  background: rgba(136, 126, 126, 0.04);
  padding: 10px;
  border-radius: 20px;
  border: 2px solid rgba(0, 0, 0, 0.02);
  margin-bottom: 20px;
}

.loginInfo, .regInput {
  text-align: center;
}

.referInput {
  text-align: left;
  line-height:20px;
}

.loginInfo:focus, .regInput:focus, .referInput:focus {
  border: 2px solid #592693 !important;
}

.signIn, .next, .save_profile, .search_btn, .status{
  margin-top: 20px;
  cursor: pointer;
  border-radius: 5em;
  color: #fff;
  background: linear-gradient(to right, #9C27B0, #E040FB);
  padding-top: 10px;
  padding-bottom: 10px;
  text-align: center;
  width: 100px;
}

.status {
  margin-left: 20px;
}

.signIn, .status {
  font-size: 15px;
  margin-bottom: 20px;
}


.reg-table {
  padding-top: 30px;
  width: 90%;
}

.student-table, .referral-info-table {
  padding-top: 70px;
  width: 90%;
  padding-bottom: 20px;
}

.position-table {
  padding-top: 50px;
  width: 90%;
  padding-bottom: 50px;
}

.position-table tr {
  height: 70px;
}

.detaillabel {
  width: 30%;
  font-size: 25px;
}

.detailInfo {
  padding-left: 20px;
  text-align: left;
  font-size: 20px;
}

.next {
  margin-top: 30px;
}

.searchSubtitle {
  color: rgb(132, 82, 157);
  font-style: italic;
  font-size: 18px;
}

.search_input { 
  background: #fff;
  height: 30px;
  border-radius: 2em;
  border-color: #8C55AA;
  padding: 10px 20px;
  margin-left: 10px;
  cursor: pointer;
  width: 600px;
  font-size: 15px;
}

.searchTitle {
  padding-top: 20px;
  color: #8C55AA;
  font-weight: bold;
  font-size: 40px;
}

.header {
  margin-top: 20px;
  margin-bottom: 50px;
}

.search_by_button_grp {
  border: none;
  margin-top: 30px;
}

.search_result {
  margin-top: 30px;
}

.search_table, .search_result, .student_dashboard_table, .referrer_dashboard_table {
  width: 100%;
}

.search_result, .student_dashboard_table, .referrer_dashboard_table {
  padding-left: 50px;
  padding-right: 50px;
}

.welcomeBack{
  font-family:cursive;
  font-size: 45px;
  font-weight: normal; 
  line-height: 48px;
  margin-top: 20px;
  color:#5D0DD0;
}

.student_dashboard_table td,th, .search_result td, th, .referrer_dashboard_table td, th{
    border: 1px solid #dddddd;
    text-align: left;
    padding: 8px;
}

.dashboard {
  color:purple;
}

.student_dashboard_container, .referrer_dashboard_container{
  text-align: center;
  margin: auto;
  width: 100%;
  height: 100%;
  position: absolute;
}

.error {
  color: red;
  font-weight: bold;
}

.success {
  font-weight: bold;
}

.required{
  color:red;
}

.action {
  width: 300px;
}

.change-status {
  margin-bottom: 20px;
}

.status-form {
  margin-bottom: 30px;
}

.status-form-label {
  font-size: 20px;
}

.status-form-action {
  margin-left:10px;
  padding-left: 40px;
  padding-right: 40px;
  padding-top: 10px;
  padding-bottom: 10px;
  border-radius: 2em;
  border-color: #8C55AA;
}

#result { 
  z-index: 999;
  width: 700px;
  margin: 0 auto;
}

.result_matches tr {
  font-size: 16px;
  cursor: pointer;
  border: #8C55AA;
}

#message_center_div {
  margin-top: 20px;
  border-radius: 2em;
  width: 250px;
  height: 700px;
  background: rgb(217, 158, 249);
  position: absolute;
  z-index: 10;
  display: none;
}


/* Below css are referenced from 
   https://stackoverflow.com/questions/50409234/tooltip-inline-with-form-input
  We also modified his version.
*/
.tooltip {
  position: relative;
  display: inline-block;
}

.tooltip .tooltiptext {
  visibility: hidden;
  width: 200px;
  background-color: rgb(217, 158, 249);
  color: black;
  text-align: center;
  border-radius: 6px;
  padding: 5px 0;
  position: absolute;
  z-index: 1;
}

.tooltip:hover .tooltiptext {
  visibility: visible;
}
